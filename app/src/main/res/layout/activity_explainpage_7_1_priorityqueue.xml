<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="40dp"
        android:text="우선순위 큐"
        android:gravity="center"
        android:textSize="15dp"/>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="327dp"
                android:src="@drawable/image_7_1_priorityqueue"/>

            <Button

                android:layout_width="70dp"
                android:layout_height="70dp"
                android:layout_gravity="right"
                android:background="@drawable/kuniver"/>
            // android:onClick="mOnPopupClick"
            // 위에 코드 Button안에 넣기만 하면 수도코드 활성화
            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="우선순위 큐는 큐(Queue)나 스택(Stack)과 비슷한 축약 자료형이며, 삽입과 제거 연산을 지원하는 자료구조이다.\n
일반적은 큐와 다르게 삽입과 제거의 연산이 들어온 순서가 아닌 가장 높은 우선순위를 갖는 요소 부터 빠져 나오도록 한다. 만약 두 원소가 같은 우선순위를 가진다면, 큐에서의 순서에 의해 처리된다.\n\n우선순위 큐를 구현하는 3가지 방법\n\n1. 배열을 기반으로 구현\n
단점\n
- 데이터 삽입 및 삭제에서 데이터를 한칸씩 밀고 당기기를 해야 해서 효율이 좋지 못하다.
\n- 삽입할 위치를 찾을 땐 우선순위를 전부 비교해야 하기 때문에 또 배열 전체를 뒤져야 함.
\n\n
2. 연결리스트를 기반으로 구현\n
단점
\n- 배열기반 구현의 1번 단점은 없지만, 배열과 마찬가지로 위치를 찾아야 해서 우선순위를 전부 비교해야 한다.
\n\n
3. 힙을 이용하여 구현\n
위와 같은 이유로 우선순위 큐는 힙을 이용해서 구현한다."
                android:textSize="15dp"
                android:textStyle="bold"/>

        </LinearLayout>
    </ScrollView>
</LinearLayout>