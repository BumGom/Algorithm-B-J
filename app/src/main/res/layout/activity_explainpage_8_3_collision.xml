<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="40dp"
        android:text="충돌"
        android:gravity="center"
        android:textSize="15dp"/>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="350dp"
                android:scaleType="centerCrop"
                android:src="@drawable/image_8_3_collision"/>

            <Button
                android:onClick="mOnPopupClick"
                android:layout_width="70dp"
                android:layout_height="70dp"
                android:layout_gravity="right"
                android:background="@drawable/kuniver"/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="해시함수가 서로 다른 입력 값에 대해 동일한 해시 테이블 주소를 반환하는것을 일컬어 '충돌(Collision)'이라고 한다.
\n
충돌의 해결방법
\n1. 해시 테이블 바깥에 새로운공간을 할당하여 문제를 수습 - 개방 해싱
\n2. 처음에 주어진 해시 테이블 안에서 문제를 해결 - 폐쇄 해싱
\n
체이닝(Chaning)
\n해시함수가 서로 다른 키에 대해 같은 주소값을 반환해서 충돌이 발생하면 각 데이터를 해당 주소에 있는 링크드 리트트에 삽입하여 문제를 해결하는 기법.
체이닝 기반의 해시 테이블은 데이터 대신 링크드 리스트에 대한 포인터를 관리한다.
데이터들은 해시 테이블의 각 요소가 가리키고 있는 링크드 리스트에 저장된다.\n
개방주소법(Open Addressing)
\n해시 충돌이 발생하면 테이블 내의 새로운 주소를 탐사 한 후, 비어있는 곳에 충돌된 데이터를 입력하는 방식
\n
\n1. 선형탐사(Linear Probing)
\n	해시 함수로부터 얻어낸 주소에 이미 다른 데이터가 입력되어 있음을 발견하면, 현재 주소에서 고정폭으로 다음 주소로 이동한다.
\n	이동한 주소에도 데이터가 입력되어있으면 고정폭 만큼 다시 이동하여 비어있는 주소를 찾아 내면 그곳에 데이터를 입력한다.
\n
2. 제곱탐사(Quadratic Probing)
\n	기본적인 개념은 선형 탐사와 비교해서 크게 다르지 않다.
\n	다음 주소를 찾기 위해 이동폭이 제곱수로 늘어난다.
\n
3. 이중 해싱(Double Hashing)
\n	해시 함수에 키를 입력하여 얻어낸 주소에서 충돌이 일어날때 필요한 이동폭을 제 2의 해시 함수로 계산한다.
\n	탐사 이동폭의 규칙성을 없애면서 같은키에 대해서 항상 똑같은 결과를 얻을 수 있게된다.
\n
4. 재해싱(Rehashing)
\n	해시 테이블의 크기를 늘리고, 늘어난 해시 테이블의 크기에 맞추어 테이블 내의 모든 데이터를 다시 해싱한다.
"
                android:textSize="15dp"
                android:textStyle="bold"/>

        </LinearLayout>
    </ScrollView>
</LinearLayout>