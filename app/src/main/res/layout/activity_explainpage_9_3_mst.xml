<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="40dp"
        android:text="최소 신장 트리"
        android:gravity="center"
        android:textSize="15dp"/>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="350dp"
                android:scaleType="centerCrop"
                android:src="@drawable/image_9_3_mst"/>

            <Button
                android:onClick="mOnPopupClick"
                android:layout_width="70dp"
                android:layout_height="70dp"
                android:layout_gravity="right"
                android:background="@drawable/kuniver"/>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="
간선이 갖고 있는 가중치의 합이 최소가 되는 신장 트리	(신장 트리 = 그래프의 모든 정점을 연결하는 트리)
최소 신장 트리 알고리즘은 최소한의 비용으로 모든 정점을 연결하는 간선을 찾아내는 문제를 해결하는데 아주 유용하다.
\n\n
최소 신장 트리 종류
\n프림 알고리즘(Prim's Algorithm)
\n크루스칼 알고리즘(Kruskal's	Algorithm)
\n\n
프림 알고리즘(Prim's Algorithm) 실행 과정
\n1. 그래프와 최소 신장 트리를 준비한다. (이때 최소 신장 트리는 노드가 하나도 없는 상태)
\n2. 그래프에서 임의의 정점을 시작 정점으로 선택하여 최소 신장 트리의 루트 노드를 삽입한다.
\n3. 최소 신장 트리에 삽입되어 있는 정점들과 이 정점들의 모든 인접 정점 사이에 있는 간선의 가중치를 조사한 후,
   간선 중에 가장 가중치가 작은 것을 골라 이 간선에 연결되어 있는 인접 정점을 최소 신장 트리에 삽입한다.
   (단, 새로 삽입되는 정점은 최소 신장 트리에 삽입되어 있는 기존의 노드들과 사이클을 형성해선 안된다.)
\n4. 3. 의 과정을 반복하다가 최소 신장 트리가 그래프의 모든 정점을 연결하게 되면 알고리즘을 종료한다.
"/>

        </LinearLayout>
    </ScrollView>
</LinearLayout>